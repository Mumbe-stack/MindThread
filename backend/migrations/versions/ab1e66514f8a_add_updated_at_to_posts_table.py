"""Add updated_at to posts table

Revision ID: ab1e66514f8a
Revises: a688373b4b5a
Create Date: 2025-06-28 01:27:06.546426

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'ab1e66514f8a'
down_revision = 'a688373b4b5a'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Step 1: Handle comments table
    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        # Don't make created_at and is_approved NOT NULL yet if there are existing records
        batch_op.create_index(batch_op.f('ix_comments_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_comments_is_approved'), ['is_approved'], unique=False)
        batch_op.create_index(batch_op.f('ix_comments_is_flagged'), ['is_flagged'], unique=False)
        batch_op.create_index(batch_op.f('ix_comments_parent_id'), ['parent_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_comments_post_id'), ['post_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_comments_user_id'), ['user_id'], unique=False)
        batch_op.drop_column('likes')

    # Update existing comments with default values
    op.execute("UPDATE comments SET updated_at = created_at WHERE updated_at IS NULL")
    op.execute("UPDATE comments SET created_at = CURRENT_TIMESTAMP WHERE created_at IS NULL")
    op.execute("UPDATE comments SET is_approved = TRUE WHERE is_approved IS NULL")
    
    # Now make columns NOT NULL
    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
        batch_op.alter_column('is_approved',
               existing_type=sa.BOOLEAN(),
               nullable=False)

    # Step 2: Handle posts table
    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        batch_op.create_index(batch_op.f('ix_posts_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_posts_is_approved'), ['is_approved'], unique=False)
        batch_op.create_index(batch_op.f('ix_posts_is_flagged'), ['is_flagged'], unique=False)
        batch_op.create_index(batch_op.f('ix_posts_user_id'), ['user_id'], unique=False)

    # Update existing posts with default values
    op.execute("UPDATE posts SET updated_at = created_at WHERE updated_at IS NULL")
    op.execute("UPDATE posts SET created_at = CURRENT_TIMESTAMP WHERE created_at IS NULL")
    
    # Make posts.created_at NOT NULL
    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)

    # Step 3: Handle token_blocklist table
    with op.batch_alter_table('token_blocklist', schema=None) as batch_op:
        batch_op.drop_index('ix_token_blocklist_jti')
        batch_op.create_index(batch_op.f('ix_token_blocklist_jti'), ['jti'], unique=True)

    # Step 4: Handle users table - Add columns as nullable first
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True, default=True))
        batch_op.add_column(sa.Column('updated_at', sa.DateTime(), nullable=True))
        batch_op.drop_constraint('users_email_key', type_='unique')
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_username'), ['username'], unique=True)

    # Update existing users with default values
    op.execute("UPDATE users SET is_active = TRUE WHERE is_active IS NULL")
    op.execute("UPDATE users SET updated_at = created_at WHERE updated_at IS NULL")
    op.execute("UPDATE users SET is_admin = FALSE WHERE is_admin IS NULL")
    op.execute("UPDATE users SET is_blocked = FALSE WHERE is_blocked IS NULL")
    op.execute("UPDATE users SET created_at = CURRENT_TIMESTAMP WHERE created_at IS NULL")

    # Now make users columns NOT NULL
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('is_blocked',
               existing_type=sa.BOOLEAN(),
               nullable=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)

    # Step 5: Handle votes table - Add created_at as nullable first
    with op.batch_alter_table('votes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('created_at', sa.DateTime(), nullable=True))
        batch_op.create_index(batch_op.f('ix_votes_comment_id'), ['comment_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_votes_post_id'), ['post_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_votes_user_id'), ['user_id'], unique=False)
        batch_op.create_unique_constraint('unique_user_comment_vote', ['user_id', 'comment_id'])
        batch_op.create_unique_constraint('unique_user_post_vote', ['user_id', 'post_id'])

    # Update existing votes to have created_at = current timestamp
    op.execute("UPDATE votes SET created_at = CURRENT_TIMESTAMP WHERE created_at IS NULL")
    
    # Now make votes.created_at NOT NULL
    with op.batch_alter_table('votes', schema=None) as batch_op:
        batch_op.alter_column('created_at',
               existing_type=sa.DateTime(),
               nullable=False)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('votes', schema=None) as batch_op:
        batch_op.drop_constraint('unique_user_post_vote', type_='unique')
        batch_op.drop_constraint('unique_user_comment_vote', type_='unique')
        batch_op.drop_index(batch_op.f('ix_votes_user_id'))
        batch_op.drop_index(batch_op.f('ix_votes_post_id'))
        batch_op.drop_index(batch_op.f('ix_votes_comment_id'))
        batch_op.drop_column('created_at')

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_username'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.create_unique_constraint('users_email_key', ['email'], postgresql_nulls_not_distinct=False)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.alter_column('is_blocked',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('is_admin',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.drop_column('updated_at')
        batch_op.drop_column('is_active')

    with op.batch_alter_table('token_blocklist', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_token_blocklist_jti'))
        batch_op.create_index('ix_token_blocklist_jti', ['jti'], unique=False)

    with op.batch_alter_table('posts', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_posts_user_id'))
        batch_op.drop_index(batch_op.f('ix_posts_is_flagged'))
        batch_op.drop_index(batch_op.f('ix_posts_is_approved'))
        batch_op.drop_index(batch_op.f('ix_posts_created_at'))
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.drop_column('updated_at')

    with op.batch_alter_table('comments', schema=None) as batch_op:
        batch_op.add_column(sa.Column('likes', sa.INTEGER(), autoincrement=False, nullable=False))
        batch_op.drop_index(batch_op.f('ix_comments_user_id'))
        batch_op.drop_index(batch_op.f('ix_comments_post_id'))
        batch_op.drop_index(batch_op.f('ix_comments_parent_id'))
        batch_op.drop_index(batch_op.f('ix_comments_is_flagged'))
        batch_op.drop_index(batch_op.f('ix_comments_is_approved'))
        batch_op.drop_index(batch_op.f('ix_comments_created_at'))
        batch_op.alter_column('is_approved',
               existing_type=sa.BOOLEAN(),
               nullable=True)
        batch_op.alter_column('created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
        batch_op.drop_column('updated_at')

    # ### end Alembic commands ###